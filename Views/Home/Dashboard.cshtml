@{
    ViewData["Title"] = "Dashboard";
    var username = ViewData["Username"] as string;

    string FormatHoursToTime(double hours)
    {
        var totalMinutes = (int)(hours * 60);
        var ts = TimeSpan.FromMinutes(totalMinutes);
        return ts.ToString(@"hh\:mm");
    }
}

<section
    class="min-h-[70vh] flex flex-col justify-center items-center bg-gradient-to-r from-green-50 via-white to-green-100 p-12 rounded-3xl shadow-lg max-w-5xl mx-auto">
    <h2 class="text-3xl font-bold mb-6 text-center text-green-900 drop-shadow-lg tracking-wide">Dashboard</h2>

    <p class="text-xl text-green-800 font-semibold">
        Welcome, @username!
    </p>

    <h3 class="mt-6 text-2xl font-bold text-green-900">Your Solar Plant Summary Today</h3>

    <div class="mt-4 flex flex-col md:flex-row gap-6 w-full max-w-4xl justify-center">
        <div class="flex-1 bg-white p-6 rounded-lg shadow-md border border-green-300 flex flex-col items-center">
            <h4 class="text-lg font-semibold mb-2 text-green-800">🔋 Power Generated </h4>
            <h4 class="text-lg font-semibold mb-2 text-green-800"> (kWh)</h4>
            <div id="energyGenerated" class="text-3xl font-bold text-green-900">
                @(ViewData["EnergyGenerated"] != null ? String.Format("{0:N2}", (double)ViewData["EnergyGenerated"]!) :
                                "0.00")
            </div>
        </div>
        <div class="flex-1 bg-white p-6 rounded-lg shadow-md border border-green-300 flex flex-col items-center">
            <h4 class="text-lg font-semibold mb-2 text-green-800">🌱 Carbon Dioxide Saved </h4>
            <h4 class="text-lg font-semibold mb-2 text-green-800"> (kg)</h4>
            <div id="co2Saved" class="text-3xl font-bold text-green-900">
                @(ViewData["CO2Saved"] != null ? String.Format("{0:N2}", (double)ViewData["CO2Saved"]!) : "0.00")
            </div>
        </div>
        <div class="flex-1 bg-white p-6 rounded-lg shadow-md border border-green-300 flex flex-col items-center">
            <h4 class="text-lg font-semibold mb-2 text-green-800">⏱️ Time Active </h4>
            <h4 class="text-lg font-semibold mb-2 text-green-800">(HH:mm)</h4>
            <div id="hoursActive" class="text-3xl font-bold text-green-900">
                @(ViewData["HoursActive"] != null ? FormatHoursToTime((double)ViewData["HoursActive"]!) : "00:00")
            </div>
        </div>
    </div>

    <div class="mt-4 text-green-800 font-semibold text-lg">
        Next update in: <span id="countdownTimer">60</span> seconds
    </div>

    <div class="mt-6 flex justify-center gap-4">
        <form method="post" asp-controller="Home" asp-action="Logout">
            <button type="submit"
                class="bg-red-600 text-white font-semibold py-2 px-6 rounded hover:bg-red-700 transition duration-300">
                Logout
            </button>
        </form>
    </div>

    <script>
        let countdown = localStorage.getItem('dashboardCountdown') ? parseInt(localStorage.getItem('dashboardCountdown')) : 60;
        const countdownTimer = document.getElementById('countdownTimer');

        async function fetchLiveStats() {
            try {
                const response = await fetch('/Home/GetLiveStats');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                document.getElementById('energyGenerated').textContent = data.energyGenerated.toFixed(2);
                document.getElementById('co2Saved').textContent = data.co2Saved.toFixed(2);
                const totalMinutes = Math.floor(data.hoursActive * 60);
                const ts = new Date(totalMinutes * 60000).toISOString().substr(11, 5);
                document.getElementById('hoursActive').textContent = ts;
                countdown = 60; // reset countdown after update
                localStorage.setItem('dashboardCountdown', countdown);
            } catch (error) {
                console.error('Error fetching live stats:', error);
            }
        }

        function updateCountdown() {
            if (countdown <= 0) {
                fetchLiveStats();
            } else {
                countdownTimer.textContent = countdown;
                countdown--;
                localStorage.setItem('dashboardCountdown', countdown);
            }
        }

        // Initial fetch
        fetchLiveStats();

        // Update countdown every second
        setInterval(updateCountdown, 1000);
    </script>
</section>
